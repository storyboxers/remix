import { AbortController, Headers as NodeHeaders, Request as NodeRequest } from "@remix-run/node";
import type { APIGatewayProxyEventHeaders, APIGatewayProxyEventV2, APIGatewayProxyHandlerV2 } from "aws-lambda";
import type { AppLoadContext, ServerBuild } from "@remix-run/server-runtime";
/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */
export interface GetLoadContextFunction {
    (event: APIGatewayProxyEventV2): AppLoadContext;
}
export declare type RequestHandler = ReturnType<typeof createRequestHandler>;
/**
 * Returns a request handler for Architect that serves the response using
 * Remix.
 */
export declare function createRequestHandler({ build, getLoadContext, mode }: {
    build: ServerBuild;
    getLoadContext: GetLoadContextFunction;
    mode?: string;
}): APIGatewayProxyHandlerV2;
export declare function createRemixHeaders(requestHeaders: APIGatewayProxyEventHeaders, requestCookies?: string[]): NodeHeaders;
export declare function createRemixRequest(event: APIGatewayProxyEventV2, abortController?: AbortController): NodeRequest;

/**
 * @remix-run/architect v1.1.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var node = require('@remix-run/node');
var serverRuntime = require('@remix-run/server-runtime');

/**
 * Returns a request handler for Architect that serves the response using
 * Remix.
 */
function createRequestHandler({
  build,
  getLoadContext,
  mode = process.env.NODE_ENV
}) {
  let platform = {
    formatServerError: node.formatServerError
  };
  let handleRequest = serverRuntime.createRequestHandler(build, platform, mode);
  return async (event, _context) => {
    let abortController = new node.AbortController();
    let request = createRemixRequest(event, abortController);
    let loadContext = typeof getLoadContext === "function" ? getLoadContext(event) : undefined;
    let response = await handleRequest(request, loadContext);
    let cookies = []; // Arc/AWS API Gateway will send back set-cookies outside of response headers.

    for (let [key, values] of Object.entries(response.headers.raw())) {
      if (key.toLowerCase() === "set-cookie") {
        for (let value of values) {
          cookies.push(value);
        }
      }
    }

    if (cookies.length) {
      response.headers.delete("set-cookie");
    }

    if (abortController.signal.aborted) {
      response.headers.set("Connection", "close");
    }

    return {
      statusCode: response.status,
      headers: Object.fromEntries(response.headers),
      cookies,
      body: await response.text()
    };
  };
}
function createRemixHeaders(requestHeaders, requestCookies) {
  let headers = new node.Headers();

  for (let [header, value] of Object.entries(requestHeaders)) {
    if (value) {
      headers.append(header, value);
    }
  }

  if (requestCookies) {
    for (let cookie of requestCookies) {
      headers.append("Cookie", cookie);
    }
  }

  return headers;
}
function createRemixRequest(event, abortController) {
  let host = event.headers["x-forwarded-host"] || event.headers.host;
  let search = event.rawQueryString.length ? `?${event.rawQueryString}` : "";
  let url = new URL(event.rawPath + search, `https://${host}`);
  return new node.Request(url.href, {
    method: event.requestContext.http.method,
    headers: createRemixHeaders(event.headers, event.cookies),
    body: event.body && event.isBase64Encoded ? Buffer.from(event.body, "base64").toString() : event.body,
    abortController,
    signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal
  });
}

exports.createRemixHeaders = createRemixHeaders;
exports.createRemixRequest = createRemixRequest;
exports.createRequestHandler = createRequestHandler;

/**
 * @remix-run/cloudflare-pages v1.1.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var serverRuntime = require('@remix-run/server-runtime');

function createRequestHandler({
  build,
  getLoadContext,
  mode
}) {
  let platform = {};
  let handleRequest = serverRuntime.createRequestHandler(build, platform, mode);
  return context => {
    let loadContext = typeof getLoadContext === "function" ? getLoadContext(context) : undefined;
    return handleRequest(context.request, loadContext);
  };
}
function createPagesFunctionHandler({
  build,
  getLoadContext,
  mode
}) {
  const handleRequest = createRequestHandler({
    build,
    getLoadContext,
    mode
  });

  const handleFetch = async context => {
    let response; // https://github.com/cloudflare/wrangler2/issues/117

    context.request.headers.delete("if-none-match");

    try {
      var _response;

      response = await context.env.ASSETS.fetch(context.request.url, context.request.clone());
      response = (_response = response) !== null && _response !== void 0 && _response.ok ? new Response(response.body, response) : undefined;
    } catch {}

    if (!response) {
      response = await handleRequest(context);
    }

    return response;
  };

  return async context => {
    try {
      return await handleFetch(context);
    } catch (e) {
      if (process.env.NODE_ENV === "development" && e instanceof Error) {
        console.error(e);
        return new Response(e.message || e.toString(), {
          status: 500
        });
      }

      return new Response("Internal Error", {
        status: 500
      });
    }
  };
}

exports.createPagesFunctionHandler = createPagesFunctionHandler;
exports.createRequestHandler = createRequestHandler;

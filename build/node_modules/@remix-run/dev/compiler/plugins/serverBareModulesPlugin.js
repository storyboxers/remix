/**
 * @remix-run/dev v1.1.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var module$1 = require('module');
var path = require('path');
var virtualModules = require('../virtualModules.js');

/**
 * A plugin responsible for resolving bare module ids based on server target.
 * This includes externalizing for node based plaforms, and bundling for single file
 * environments such as cloudflare.
 */

function serverBareModulesPlugin(remixConfig, dependencies, onWarning) {
  return {
    name: "server-bare-modules",

    setup(build) {
      build.onResolve({
        filter: /.*/
      }, ({
        importer,
        path: path$1
      }) => {
        // If it's not a bare module ID, bundle it.
        if (!isBareModuleId(path$1)) {
          return undefined;
        } // To prevent `import xxx from "remix"` from ending up in the bundle
        // we "bundle" remix but the other modules where the code lives.


        if (path$1 === "remix") {
          return undefined;
        } // These are our virutal modules, always bundle the because there is no
        // "real" file on disk to externalize.


        if (path$1 === virtualModules.serverBuildVirtualModule.id || path$1 === virtualModules.assetsManifestVirtualModule.id) {
          return undefined;
        } // Always bundle CSS files so we get immutable fingerprinted asset URLs.


        if (path$1.endsWith(".css")) {
          return undefined;
        }

        let packageName = getNpmPackageName(path$1); // Warn if we can't find an import for a package.

        if (onWarning && !isNodeBuiltIn(packageName) && !/\bnode_modules\b/.test(importer) && !module$1.builtinModules.includes(packageName) && !dependencies[packageName]) {
          onWarning(`The path "${path$1}" is imported in ` + `${path.relative(process.cwd(), importer)} but ` + `${packageName} is not listed in your package.json dependencies. ` + `Did you forget to install it?`, packageName);
        }

        switch (remixConfig.serverBuildTarget) {
          // Always bundle everything for cloudflare.
          case "cloudflare-pages":
          case "cloudflare-workers":
            return undefined;
          // Map node externals to deno std libs and bundle everything else.

          case "deno":
            if (isNodeBuiltIn(packageName)) {
              return {
                path: `https://deno.land/std/node/${packageName}/mod.ts`,
                external: true
              };
            }

            return undefined;
        } // Externalize everything else if we've gotten here.


        return {
          path: path$1,
          external: true
        };
      });
    }

  };
}

function isNodeBuiltIn(packageName) {
  return module$1.builtinModules.includes(packageName);
}

function getNpmPackageName(id) {
  let split = id.split("/");
  let packageName = split[0];
  if (packageName.startsWith("@")) packageName += `/${split[1]}`;
  return packageName;
}

function isBareModuleId(id) {
  return !id.startsWith(".") && !id.startsWith("~") && !path.isAbsolute(id);
}

exports.serverBareModulesPlugin = serverBareModulesPlugin;

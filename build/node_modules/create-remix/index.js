#!/usr/bin/env node
/**
 * create-remix v1.1.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var child_process = require('child_process');
var fse = require('fs-extra');
var cliPkgJson = require('./package.json');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);
var fse__default = /*#__PURE__*/_interopDefaultLegacy(fse);
var cliPkgJson__default = /*#__PURE__*/_interopDefaultLegacy(cliPkgJson);

async function createApp({
  projectDir,
  lang,
  server,
  install
}) {
  // Create the app directory
  let relativeProjectDir = path__namespace.relative(process.cwd(), projectDir);
  let projectDirIsCurrentDir = relativeProjectDir === "";

  if (!projectDirIsCurrentDir) {
    if (fse__default["default"].existsSync(projectDir)) {
      console.log(`️🚨 Oops, "${relativeProjectDir}" already exists. Please try again with a different directory.`);
      process.exit(1);
    } else {
      await fse__default["default"].mkdir(projectDir);
    }
  } // copy the shared template


  let sharedTemplate = path__namespace.resolve(__dirname, "templates", `_shared_${lang}`);
  await fse__default["default"].copy(sharedTemplate, projectDir); // copy the server template

  let serverTemplate = path__namespace.resolve(__dirname, "templates", server);

  if (fse__default["default"].existsSync(serverTemplate)) {
    await fse__default["default"].copy(serverTemplate, projectDir, {
      overwrite: true
    });
  }

  let serverLangTemplate = path__namespace.resolve(__dirname, "templates", `${server}_${lang}`);

  if (fse__default["default"].existsSync(serverLangTemplate)) {
    await fse__default["default"].copy(serverLangTemplate, projectDir, {
      overwrite: true
    });
  } // rename dotfiles


  await fse__default["default"].move(path__namespace.join(projectDir, "gitignore"), path__namespace.join(projectDir, ".gitignore")); // merge package.jsons

  let appPkg = require(path__namespace.join(sharedTemplate, "package.json"));

  let serverPkg = require(path__namespace.join(serverTemplate, "package.json"));

  ["dependencies", "devDependencies", "scripts"].forEach(key => {
    Object.assign(appPkg[key], serverPkg[key]);
  });
  appPkg.main = serverPkg.main; // add current versions of remix deps

  ["dependencies", "devDependencies"].forEach(pkgKey => {
    for (let key in appPkg[pkgKey]) {
      if (appPkg[pkgKey][key] === "*") {
        // Templates created from experimental, alpha, beta releases should pin
        // to a specific version
        appPkg[pkgKey][key] = String(cliPkgJson__default["default"].version).includes("-") ? cliPkgJson__default["default"].version : "^" + cliPkgJson__default["default"].version;
      }
    }
  }); // write package.json

  await fse__default["default"].writeFile(path__namespace.join(projectDir, "package.json"), JSON.stringify(appPkg, null, 2));

  if (install) {
    child_process.execSync("npm install", {
      stdio: "inherit",
      cwd: projectDir
    });
  }

  if (projectDirIsCurrentDir) {
    console.log(`💿 That's it! Check the README for development and deploy instructions!`);
  } else {
    console.log(`💿 That's it! \`cd\` into "${path__namespace.relative(process.cwd(), projectDir)}" and check the README for development and deploy instructions!`);
  }
}

exports.createApp = createApp;

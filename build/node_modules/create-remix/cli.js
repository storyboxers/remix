#!/usr/bin/env node
/**
 * create-remix v1.1.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

var path = require('path');
var chalkAnimation = require('chalk-animation');
var inquirer = require('inquirer');
var meow = require('meow');
var _ = require('.');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);
var chalkAnimation__default = /*#__PURE__*/_interopDefaultLegacy(chalkAnimation);
var inquirer__default = /*#__PURE__*/_interopDefaultLegacy(inquirer);
var meow__default = /*#__PURE__*/_interopDefaultLegacy(meow);

const help = `
  Usage:
    $ npx create-remix [flags...] [<dir>]

  If <dir> is not provided up front you will be prompted for it.

  Flags:
    --help, -h          Show this help message
    --version, -v       Show the version of this script
`;
run().then(() => {
  process.exit(0);
}, error => {
  console.error(error);
  process.exit(1);
});

async function run() {
  let {
    input,
    flags,
    showHelp,
    showVersion
  } = meow__default["default"](help, {
    flags: {
      help: {
        type: "boolean",
        default: false,
        alias: "h"
      },
      version: {
        type: "boolean",
        default: false,
        alias: "v"
      }
    }
  });
  if (flags.help) showHelp();
  if (flags.version) showVersion();
  let anim = chalkAnimation__default["default"].rainbow(`\nR E M I X\n`);
  await new Promise(res => setTimeout(res, 1500));
  anim.stop();
  console.log("ðŸ’¿ Welcome to Remix! Let's get you set up with a new project.");
  console.log(); // Figure out the app directory

  let projectDir = path__namespace.resolve(process.cwd(), input.length > 0 ? input[0] : (await inquirer__default["default"].prompt([{
    type: "input",
    name: "dir",
    message: "Where would you like to create your app?",
    default: "./my-remix-app"
  }])).dir);
  let answers = await inquirer__default["default"].prompt([{
    name: "server",
    type: "list",
    message: "Where do you want to deploy? Choose Remix if you're unsure, it's easy to change deployment targets.",
    loop: false,
    choices: [{
      name: "Remix App Server",
      value: "remix"
    }, {
      name: "Express Server",
      value: "express"
    }, {
      name: "Architect (AWS Lambda)",
      value: "arc"
    }, {
      name: "Fly.io",
      value: "fly"
    }, {
      name: "Netlify",
      value: "netlify"
    }, {
      name: "Vercel",
      value: "vercel"
    }, {
      name: "Cloudflare Pages",
      value: "cloudflare-pages"
    }, {
      name: "Cloudflare Workers",
      value: "cloudflare-workers"
    }]
  }, {
    name: "lang",
    type: "list",
    message: "TypeScript or JavaScript?",
    choices: [{
      name: "TypeScript",
      value: "ts"
    }, {
      name: "JavaScript",
      value: "js"
    }]
  }, {
    name: "install",
    type: "confirm",
    message: "Do you want me to run `npm install`?",
    default: true
  }]);
  await _.createApp({
    projectDir,
    lang: answers.lang,
    server: answers.server,
    install: answers.install
  });
}
